#pragma once

//////////////////////////////////////////////////////////
// Standard Library Headers
//////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////
// External Library Headers
//////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////
// Project Headers
//////////////////////////////////////////////////////////

#include "ISystem.h"
#include "EventSystem.h"

//////////////////////////////////////////////////////////
// Forward Declarations
//////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////
// Constants and Enums
//////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////
// Class Declaration
//////////////////////////////////////////////////////////

class InputSystem : public ISystem {
public:
    explicit InputSystem(entt::registry& registry);
    virtual ~InputSystem() = default;

    virtual void Update(float deltaTime) override;

private:
    InputSystem(const InputSystem&) = delete;
    InputSystem(InputSystem &&) = delete;
    InputSystem& operator=(const InputSystem&) = delete;
    InputSystem&& operator=(InputSystem&&) = delete;

private:
    // Private Functions

private:
    // Member Variables

};