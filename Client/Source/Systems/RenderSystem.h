#pragma once

//////////////////////////////////////////////////////////
// Standard Library Headers
//////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////
// External Library Headers
//////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////
// Project Headers
//////////////////////////////////////////////////////////

#include "ISystem.h"

//////////////////////////////////////////////////////////
// Forward Declarations
//////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////
// Constants and Enums
//////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////
// Class Declaration
//////////////////////////////////////////////////////////

class RenderSystem : public ISystem {
public:
    RenderSystem(entt::registry& registry);
    virtual ~RenderSystem() = default;

	virtual void Update(float deltaTime) override;

    virtual void Render(sf::RenderWindow& window) override;

private:
    RenderSystem(const RenderSystem&) = delete;
    RenderSystem(RenderSystem &&) = delete;
    RenderSystem& operator=(const RenderSystem&) = delete;
    RenderSystem&& operator=(RenderSystem&&) = delete;

private:
    // Private Functions

private:
    // Member Variables

};