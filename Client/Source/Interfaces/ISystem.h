#pragma once

//////////////////////////////////////////////////////////
// Standard Library Headers
//////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////
// External Library Headers
//////////////////////////////////////////////////////////

#include <SFML/Graphics.hpp>
#include <SFML/System.hpp>
#include <SFML/Network.hpp>
#include <SFML/Audio.hpp>

#include <entt/entt.hpp>

//////////////////////////////////////////////////////////
// Project Headers
//////////////////////////////////////////////////////////

#include "Components.h"

//////////////////////////////////////////////////////////
// Forward Declarations
//////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////
// Constants and Enums
//////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////
// Class Declaration
//////////////////////////////////////////////////////////

class ISystem {
public:
    ISystem(entt::registry& registry) 
        : m_registry(registry) {}
    virtual ~ISystem() = default;

	virtual void Update(float deltaTime) = 0;

    virtual void FixedUpdate(float deltaTime) {}

    virtual void Render(sf::RenderWindow& window) {};

    entt::registry& GetRegistry() { return m_registry; }

private:
    ISystem(const ISystem&) = delete;
    ISystem(ISystem &&) = delete;
    ISystem& operator=(const ISystem&) = delete;
    ISystem&& operator=(ISystem&&) = delete;

private:
    entt::registry& m_registry;
};
