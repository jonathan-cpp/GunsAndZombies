#pragma once

//////////////////////////////////////////////////////////
// Standard Library Headers
//////////////////////////////////////////////////////////

#include <memory>

//////////////////////////////////////////////////////////
// Thirdparty Headers
//////////////////////////////////////////////////////////

#include <entt/entt.hpp>

//////////////////////////////////////////////////////////
// Project Headers
//////////////////////////////////////////////////////////

#include "Systems.h"

//////////////////////////////////////////////////////////
// Forward Declarations
//////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////
// Class Declaration
//////////////////////////////////////////////////////////

class IScene {
public:   
    virtual ~IScene() = default;
 
    template<typename T, typename... Args>
    T* AddSystem(Args&&... args);

    void Update(float deltaTime);

    void FixedUpdate(float deltaTime);

    void Render(sf::RenderWindow& window);

    entt::registry& GetRegistry();

private:
    entt::registry m_registry;

    std::vector<std::unique_ptr<ISystem>> m_systems;
};

template <typename T, typename... Args>
inline T* IScene::AddSystem(Args&&... args) {
    T* ptr = new T(std::forward<Args>(args)...);
    m_systems.emplace_back(ptr);
    return ptr;
}